
---
- name: "Create AMI | {{ system_role }}"
  ec2_ami:
    state: present
    region: "{{ region }}"
    name: "{{ project }}-{{ system_role }}-{{ timestamp }}"
    instance_id: "{{ instances[system_role] }}"
    wait: yes
  register: ami
  when: system_role in autoscale_roles


- name: "Launch Configuration | {{ system_role }}"
  ec2_lc:
    state: present
    region: "{{ region }}"
    assign_public_ip: "{% if system_role in roles_needing_public_ip %}yes{% else %}no{% endif %}"
    name: "{{ project }}-{{ system_role }}-{{ timestamp }}"
    instance_type: "{{ instance_type[system_role] }}"
    image_id: "{{ ami.image_id }}"
    security_groups: "{{ security_group_id['managed'] }},{{ security_group_id[system_role] }}"
    # spot_price: "{{ instance_bid }}"
    instance_profile_name: autonomous
    user_data: "{{ forge_userdata | b64decode }}"
  when: system_role in autoscale_roles


- name: "AutoScaling Group | {{ system_role }}"
  ec2_asg:
    state: present
    region: "{{ region }}"
    availability_zones: "{{ availability_zones | join(',') }}"
    launch_config_name: "{{ project }}-{{ system_role }}-{{ timestamp }}"
    load_balancers: "{% if has_load_balancer %}{{ project }}-{{ system_role }}{% else %}{{ [] }}{% endif %}"
    name: "{{ project }}-{{ system_role }}"
    min_size: "{{ autoscale_min[system_role] }}"
    max_size: "{{ autoscale_max[system_role] }}"
    desired_capacity: "{{ autoscale_desire[system_role] }}"
    vpc_zone_identifier: "{{ vpc.subnets | selectattr('resource_tags.Role', 'equalto', system_role) | join(',', attribute='id') }}"
    tags:
      - Environment: "{{ environment_tier }}"
      - Project:     "{{ project }}"
      - Role:        "{{ system_role }}-autoscaled"
      - Name:        "{{ system_role }}.{{ project }}-{{ environment_tier }}"
      - ForgeRegion: "{{ forge_region }}"
      - ForgeBucket: "{{ forge_bucket }}"
  when: system_role in autoscale_roles


- name: "Autoscaling Policies | {{ system_role }}"
  ec2_scaling_policy:
    state: present
    region: "{{ region }}"
    name: "{{ item.name }}"
    asg_name: "{{ project }}-{{ system_role }}"
    adjustment_type: "{{ item.adjustment_type }}"
    min_adjustment_step: "{{ item.min_adjustment_step }}"
    scaling_adjustment: "{{ item.scaling_adjustment }}"
    cooldown: "{{ item.cooldown }}"
  with_items:
    - name: "Increase Group Size"
      adjustment_type: "ChangeInCapacity"
      scaling_adjustment: +1
      min_adjustment_step: 1
      cooldown: 60
    - name: "Decrease Group Size"
      adjustment_type: "ChangeInCapacity"
      scaling_adjustment: -1
      min_adjustment_step: 1
      cooldown: 180
  register: autoscale_policy


- name: "Autoscaling Alarm | High CPU | {{ system_role }}"
  ec2_metric_alarm:
    state: present
    region: "{{ region }}"
    name: "{{ project }}-{{ system_role }}-scale-up"
    metric: CPUUtilization
    statistic: Average
    unit: Percent
    comparison: ">="
    threshold: 50.0
    evaluation_periods: 5
    period: 60
    namespace: AWS/EC2
    alarm_actions: "{{ autoscale_policy.results[0].arn }}"


- name: "Autoscaling Alarm | Low CPU | {{ system_role }}"
  ec2_metric_alarm:
    state: present
    region: "{{ region }}"
    name: "{{ project }}-{{ system_role }}-scale-down"
    metric: CPUUtilization
    statistic: Average
    unit: Percent
    comparison: ">="
    threshold: 20.0
    evaluation_periods: 5
    period: 60
    namespace: AWS/EC2
    alarm_actions: "{{ autoscale_policy.results[1].arn }}"

